(struct buffer-and-length buffer (ptr (array int 1)) buffer-length int)

(struct slice-and-pivot low-index int high-index int pivot int)

(def lower-partition (arr (ptr (array int 1)) bounds-and-pivot slice-and-pivot buffer buffer-and-length) void
  (declare low int (member bounds-and-pivot low-index))
  (declare high int (member bounds-and-pivot high-index))
  (declare pivot int (member bounds-and-pivot pivot))
  (declare buffer-index int 0)
  (declare i int 0)
  (set (member buffer buffer-length) 0)
  (while (<= (+ low i) high) (do
    (declare array-element int (nth (deref arr) (+ low i)))
    (if (< array-element pivot) (do
      (set (nth (deref (member buffer buffer)) buffer-index) array-element)
      (set (member buffer buffer-length) (+ 1 (member buffer buffer-length)))
      (set buffer-index (+ 1 buffer-index))))
    (set i (+ 1 i))))
  (return))

(def middle-partition (arr (ptr (array int 1)) bounds-and-pivot slice-and-pivot buffer buffer-and-length) void
  (declare low int (member bounds-and-pivot low-index))
  (declare high int (member bounds-and-pivot high-index))
  (declare pivot int (member bounds-and-pivot pivot))
  (declare buffer-index int 0)
  (declare i int 0)
  (set (member buffer buffer-length) 0)
  (while (<= (+ low i) high) (do
    (declare array-element int (nth (deref arr) (+ low i)))
    (if (= array-element pivot) (do
      (set (nth (deref (member buffer buffer)) buffer-index) array-element)
      (set (member buffer buffer-length) (+ 1 (member buffer buffer-length)))
      (set buffer-index (+ 1 buffer-index))))
    (set i (+ 1 i))))
  (return))

(def upper-partition (arr (ptr (array int 1)) bounds-and-pivot slice-and-pivot buffer buffer-and-length) void
  (declare low int (member bounds-and-pivot low-index))
  (declare high int (member bounds-and-pivot high-index))
  (declare pivot int (member bounds-and-pivot pivot))
  (declare buffer-index int 0)
  (declare i int 0)
  (set (member buffer buffer-length) 0)
  (while (<= (+ low i) high) (do
    (declare array-element int (nth (deref arr) (+ low i)))
    (if (> array-element pivot) (do
      (set (nth (deref (member buffer buffer)) buffer-index) array-element)
      (set (member buffer buffer-length) (+ 1 (member buffer buffer-length)))
      (set buffer-index (+ 1 buffer-index))))
    (set i (+ 1 i))))
  (return))

(def fix-up (arr (ptr (array int 1)) bounds-and-pivot slice-and-pivot lower-buffer buffer-and-length middle-buffer buffer-and-length upper-buffer buffer-and-length) void
  (declare buffer-index int 0)
  (declare array-index int (member bounds-and-pivot low-index))
  (while (< buffer-index (member lower-buffer buffer-length)) (do
    (set (nth (deref arr) array-index) (nth (deref (member lower-buffer buffer)) buffer-index))
    (set array-index (+ 1 array-index))
    (set buffer-index (+ 1 buffer-index))))
  (set buffer-index 0)
  (while (< buffer-index (member middle-buffer buffer-length)) (do
    (set (nth (deref arr) array-index) (nth (deref (member middle-buffer buffer)) buffer-index))
    (set array-index (+ 1 array-index))
    (set buffer-index (+ 1 buffer-index))))
  (set buffer-index 0)
  (while (< buffer-index (member upper-buffer buffer-length)) (do
    (set (nth (deref arr) array-index) (nth (deref (member upper-buffer buffer)) buffer-index))
    (set array-index (+ 1 array-index))
    (set buffer-index (+ 1 buffer-index))))
  (return))

(def quicksort (arr (ptr (array int 1)) slice slice-and-pivot lower-buffer buffer-and-length middle-buffer buffer-and-length upper-buffer buffer-and-length) void
  (if (>= (member slice low-index) (member slice high-index)) (return))
  (declare pivot int (/ (+ (member slice low-index) (member slice high-index)) 2))
  (set (member slice pivot) pivot)
  (lower-partition arr slice lower-buffer)
  (middle-partition arr slice middle-buffer)
  (upper-partition arr slice upper-buffer)
  (fix-up arr slice lower-buffer middle-buffer upper-buffer)
  (declare lower-slice slice-and-pivot slice)
  (declare upper-slice slice-and-pivot slice)
  (set (member lower-slice high-index) (- 1 (+ (member slice low-index) (member lower-buffer buffer-length))))
  (set (member upper-slice low-index) (+ (member lower-slice high-index) (member middle-buffer buffer-length)))
  (quicksort arr lower-slice lower-buffer middle-buffer upper-buffer)
  (quicksort arr upper-slice lower-buffer middle-buffer upper-buffer)
  (return))

(def main () int
  (declare arr (ptr (array int 1)) (malloc 3))
  (set (nth (deref arr) 0) 3)
  (set (nth (deref arr) 1) 2)
  (set (nth (deref arr) 2) 1)
  (declare slice (ptr slice-and-pivot) (malloc (sizeof slice-and-pivot)))
  (set (member (deref slice) low-index) 0)
  (set (member (deref slice) high-index) 2)
  (declare lower-buffer (ptr (array int 1)) (malloc 3))
  (declare middle-buffer (ptr (array int 1)) (malloc 3))
  (declare upper-buffer (ptr (array int 1)) (malloc 3))
  (declare lower-buffer-and-length (ptr buffer-and-length) (malloc 2))
  (declare middle-buffer-and-length (ptr buffer-and-length) (malloc 2))
  (declare upper-buffer-and-length (ptr buffer-and-length) (malloc 2))
  (set (member (deref lower-buffer-and-length) buffer) lower-buffer)
  (set (member (deref middle-buffer-and-length) buffer) middle-buffer)
  (set (member (deref upper-buffer-and-length) buffer) upper-buffer)
  (break)
  (quicksort arr slice lower-buffer-and-length middle-buffer-and-length upper-buffer-and-length)
  (return 0))
